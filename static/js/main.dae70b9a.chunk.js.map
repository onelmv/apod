{"version":3,"sources":["components/Header.js","components/SearchField.js","components/body.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","SearchField","date","dateChange","dateObj","Date","today","getFullYear","getMonth","slice","getDate","htmlFor","type","id","min","max","value","onChange","Body","apod","block","media_type","title","height","src","url","console","log","alt","href","explanation","copyright","App","onDateFieldChange","event","target","setState","state","this","fetchData","fetch","then","response","json","data","prevProps","prevState","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dae70b9a.chunk.js","sourcesContent":["import  React, { Fragment } from 'react';\r\n\r\nconst Header = () =>{\r\n    return (\r\n        <Fragment>\r\n            <div className='pa2'>\r\n                <p className=' ma0'>Astronomy Picture of the Day</p>\r\n            </div>\r\n        </Fragment >\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { Fragment } from 'react';\r\n\r\n\r\nconst SearchField = ({date,dateChange}) => {\r\n    \r\n    let dateObj = new Date();\r\n    let today = dateObj.getFullYear()+'-'+(\"0\"+(dateObj.getMonth()+1)).slice(-2)+'-'+(\"0\" + dateObj.getDate()).slice(-2); //stackoverflow\r\n    \r\n\r\n    return (\r\n        <Fragment>\r\n            <div  className='f6 p0 ma0 '>\r\n               \r\n                <label className='db' htmlFor=\"date\">select date:</label>\r\n                <input  className='bg-lightest-blue shadow-3 w-12' \r\n                        type=\"date\" \r\n                        id='date' \r\n                        min='1995-06-20' \r\n                        max= {today}\r\n                        value={date}\r\n                        onChange={dateChange}\r\n               />\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n\r\nexport default SearchField;","import React, { Fragment } from 'react';\r\n\r\n\r\nconst Body =({apod})=>{\r\n\r\n\r\n    let block = \"\"\r\n    if(apod.media_type === 'video'){\r\n        block =  <iframe title='video' className='db w-100  br2 br--top grow tc'  height='450' src={apod.url} ></iframe> \r\n        console.log(apod.url)\r\n    }else{\r\n        \r\n        block = <img src={apod.url} className='db w-100 br2 br--top grow' alt={apod.title}/>\r\n    }\r\n    \r\n    \r\n    return (\r\n        \r\n        <Fragment>\r\n            <div>\r\n                <div className=\"br2 ba dark-gray bg-washed-blue b--black-10 mv4 w-90 w-90-m w-90-l mw7 center \">\r\n                    \r\n                    \r\n                    {/* <img src={apod.url} className=\"db w-100 br2 br--top grow\" alt={apod.title}/> */}\r\n                    \r\n                    <a href={apod.url}>\r\n                        {block}\r\n                    </a>\r\n\r\n                    <div className=\"pa2 ph3-ns pb3-ns\">\r\n                        <div className=\"dt w-100 mt1\">\r\n                            <div className=\"tc\">\r\n                                <h1 className=\"f5 f4-ns\">{apod.title}</h1>\r\n                            </div>\r\n                        </div>\r\n                        <p className=\"f6 lh-copy pa2 mt2 mid-gray\">{apod.explanation}</p>\r\n                        {/* if the image have copyright , incert , otherwise dont put nothing */}\r\n                        <h6 className='f6 ma1'>{apod.copyright?`\\u00A9 ${apod.copyright}`:``}  </h6>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <footer className='f6'>onelmv</footer>\r\n                </div>\r\n            </div>\r\n            \r\n        </Fragment>\r\n    )\r\n}\r\n\r\n\r\nexport default Body","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header.js'\r\nimport SearchField from './components/SearchField.js'\r\nimport Body from './components/body.js';\r\n\r\nclass App extends Component {\r\n  \r\n  constructor(){\r\n    super()\r\n    this.state = {\r\n      date: '', /* new Date().toJSON().slice(0,10) */// it's not working ,UTC timezone\r\n      apod: {}\r\n    }\r\n  }\r\n\r\n  /* ////////////////////////////////// */\r\n\r\n  componentDidMount(){\r\n    let date = new Date();\r\n    let today = date.getFullYear()+'-'+(\"0\"+(date.getMonth()+1)).slice(-2)+'-'+(\"0\" + date.getDate()).slice(-2); //stackoverflow\r\n    this.setState({date:today})\r\n    \r\n    this.fetchData(this.state.date);   \r\n  }\r\n\r\n  fetchData(date){\r\n    const nasa_key= 'DkNMzkFMlHAPPxLOvNGqeAnCkAyrmOtBIjhg1Rgs';    \r\n\r\n    fetch(`https://api.nasa.gov/planetary/apod?date=${date}&api_key=${nasa_key}`)\r\n          .then(response=>response.json())\r\n          .then(data=>this.setState({apod:data})\r\n          )          \r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState){\r\n    /* console.log('componentDidUpdate', this.state.date, prevState.date); */\r\n    if (this.state.date !== prevState.date)\r\n      this.fetchData(this.state.date);   \r\n  }\r\n\r\n  /* ////////////////////////////////// */\r\n  onDateFieldChange =(event)=>{\r\n    let date = new Date();\r\n    /* This control statement is for avoid to user change the date with th keyboard */\r\n    if(event.target.value <= date.getFullYear()+'-'+(\"0\"+(date.getMonth()+1)).slice(-2)+'-'+(\"0\" + date.getDate()).slice(-2)){\r\n      this.setState({ date: event.target.value })      \r\n    }/* else{ //this part is not necesary\r\n      console.log(\"date out of range\",event.target.value )\r\n      this.setState({ date: date.getFullYear()+'-'+(\"0\"+(date.getMonth()+1)).slice(-2)+'-'+(\"0\" + date.getDate()).slice(-2) }) \r\n    } */\r\n     \r\n    console.log(\"event:\",event.target.value,\"|state: \",this.state.date)     \r\n  }\r\n \r\n\r\n  /* ////////////////////////////////// */\r\n  render (){\r\n    return (\r\n      <div className=\"tc f2 lh-copy georgia bg-light-blue \">\r\n        <Header />\r\n        <SearchField dateChange={this.onDateFieldChange} date={this.state.date} />\r\n        <Body date={this.state.date} apod={this.state.apod} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}